if(商品追加のボタンが押されたら){
  INSERTの処理(トランザクション)
}else if(在庫数変更のボタンが押されたら){
  UPDATE処理(在庫数)
}

・商品追加のボタンを押した→商品追加のコードが実行
・在庫数変更のボタンを押した→在庫数変更のコードが実行
・ステータス変更のボタンを押した→ステータス変更のコードが実行


各変数の初期化処理
<POSTされた場合>
  a. 商品追加のボタンが押されたら
　  商品追加のフォームから値の受け取り
      画像のアップロード
  b. 在庫数変更のボタンが押されたら
      在庫数変更のフォームから値の受け取り
  c. ステータス変更のボタンが押されたら
      ステータス変更のボタンから値の受け取り

  「DBに接続(PDOオブジェクトの生成)」
  a. 商品追加のボタンが押されたら
     トランザクション開始
        商品のテーブルにINSERT
        在庫のテーブルにINSERT
     コミットor ロールバック
  b. 在庫数変更のボタンが押されたら
       在庫のテーブルにUPDATE
  c. ステータス変更のボタンが押されたら
       商品のテーブルにUPDATE

(POSTされていてもいなくても)
SELECT文で商品一覧を取得

<以下はHTML>

//ここの$dsn, $username, $passwordがそれぞれ定数DSN, DB_USER, DB_PASSWDで置き換えられる
1. 初期化
2. issetでのチェック
3. POSTの受け取り（代入）
4. エラーチェック（空文字、正規表現チェックなど）


重複ユーザーは、DBのテーブルに登録されているかどうかをチェックすることになるので、
DBの接続後になりますね！DBに接続したらまずは同じ名前のユーザーがいないかどうかチェックして、
その後重複していたらエラーメッセージを出しその後の処理を行わないことになります。
現在はエラーメッセージがあってもなくてもDB接続を実行していらっしゃる状態

1. エラーメッセージは直接プリントするのではなく、$err_msgの配列に代入
2. DB接続前にcount($err_msg)をチェック
3. select文で重複ユーザーをチェック
4. 重複ユーザーがいれば$err_msgの配列にエラーメッセージ
5. count($err_msg)をチェック
6. エラーがなければユーザーをinsert
という大きな流れになります。

1. WHERE user_name = $user_name(入力されたユーザー名)を条件にselect文を実行
2. select文の実行結果が１行以上あればエラーメッセージを表示


2017/7/10
preg_matchはエラーチェックに使うものです。文字列の置換に使うpreg_replaceと
使い方が大きく違うので気をつけましょう。

このような流れになります。
1. 初期化、2. issetで存在チェック 3. 受け取り 4. エラーチェックの流れになっているのがわかりますか？

トリムとは違うものなのでしょうか？
通常のtrim関数が「半角スペース」を取り除くのに対して、こちらの処理は「全角・半角両方のスペース」を
取り除くことができますね！
ですので、trimのみ、あるいはスペース削除なしでも、今回はオッケーです！


2017/7/13

// カート内チェック
//ここで使っている、sql_kindという変数は何のためのものですか？
//こちらはまずPOSTから受け取った値だということはわかりますか？
//ありがとうございます。つまり、この変数は「フォームのどのボタンを押したかによって処理を切り替えるための変数」です。
//例えば、自動販売機の管理画面であれば、商品追加のボタンを押したのか、
//在庫数更新のボタンを押したのか、ステータス変更のボタンを押したのかで、処理を切り替えるためのものです。
//そして、今回はSELECTからINSERT or UPDATEという処理になりますが、
//これはどのボタンを押しても共通の内容です。つまり、ボタンによって処理を切り替える必要はなく、
//単にitem_idの値が変化すれば良いだけです。従って、今回のプログラムでは
//$sql_kindは不要になり、同時にこのif文も不要ということになります。
//今回の場合はcart.phpにカートへの追加の処理を書いていらっしゃいますが、
//サンプルのECサイトでは商品一覧のページでカートへの追加を行なっているのは確認しましたか？
//一覧のページでカートに追加して、カートのページでは追加した商品の一覧表示をしています。
//カートに追加した時点では、商品一覧のページのままです。ですので、今書いていただいている処理は
//サンプルと同じ動作ならばitemlist.phpで行うことになりますね！

// try文の中でifが始まっているのに、try文の中でifが閉じていません。
// こちらはまだtry文を閉じる必要はなさそうですね！

//そうですね！ところが、そもそも2つのtry文をまたいでif~else ifの構文を使うことはできません。
//どのかっこが対応しているのかわからなくなってしまいます。
//また、そもそもこの時点でcatchする必要がありません。
//try-catchはtry節の中で例外が発生した時に、途中の処理を飛ばしてcatch節にジャンプするための構文です。
//今回の場合は、select文で例外が発生したらそのまま残りの処理も必要ないので全部の処理が終わったところで
//catchすればオッケーです。selectで例外が発生したら、insertやupdateはスキップすることになります。


2017/7/14

//そして、今回はログインが未実装なので、仮置きで$user_idを入れておくしかありません。
//あとでログイン処理を実装したら、ここはログインチェックに置き換わることになります。
//購入処理まで完成してからでオッケーです。
//カートに入れたり、購入したりする処理はユーザーidが無いと書けないので、仮の設定が必要になります。
//では、これで一度動作を確認しましょう。まだカートには何も入っていないはずなので、SELECTを実行した結果、何も取得できず、INSERTの処理にうつるはずです。


//SQLを解釈する時に、どちらのitem_idに条件をつけているのかがわからなくなるのでエラーになっていたのです。
//ここからは、SELECT文の結果をもとに、一件でもデータがあればUPDATE,
//データがなければINSERTすることになります。

//わかりました。まずはエラーになる原因を理解しましょう。
//上のSQLで?になっている部分は後から?の部分に値を設定しないといけないのはわかりますね？
//なので、?の部分にバインドするのですが、$user_idが空文字になっていると、このSQLは、抜粋ですが
// AND user_id =
//で終わってしまいます。これは明らかにエラーになりますね。ここはわかりますか？
//なるほど、そもそも、bindValueというのは何をするものですか？
//はい、こちらprepareでエラーが出ていますが、エラーメッセージの内容は
//Column 'item_id' in where clause is ambiguous' とありますので
//SQLの中のwhere 節で、item_idというカラム名が使われており、それがambiguous（曖昧）だと言っています。
//carts.item_id とitems.item_idのどちらなのか不明ということですね。

//なるほど。トランザクションは2つのDB更新処理があった時に、どちらかが失敗したらもう片方の更新も取り消すための処理です。
//今回はSELECTですので必要ありませんね。
２つのインサート文を順番に実行したり、インサートしてからアップデートしたりする時に使います。
//今回はcarts.item_id とitems.item_idのどちらなのか不明なのが原因ですので、WHERE節の中で、どちらのitem_idなのかを
//指定してあげればオッケーです。

//例えば上の行の代わりに $stmt->bindValue(2, 2, PDO::PARAM_INT);とすれば
//上の AND user_id = ? のところが AND user_id = 2 になるのはわかりますか？
//ありがとうございます。では仮に $user_id = 2 となっていたら
// $stmt->bindValue(2, $user_id, PDO::PARAM_INT);でも同じ結果になるのは大丈夫ですか？。
//では、それと同じように $user_id = '' であれば
// $stmt->bindValue(2, $user_id, PDO::PARAM_INT);を実行すると
// AND user_id = 
//となるのはいかがですか？空っぽのままですよね。
// はい、そうです。ですので、どこかで$user_idに値が代入される必要があります。

//はい、そうです。なるほど、ログインという処理は何をする処理ですか？
//ログインではクッキーは直接関わりませんね。メールアドレスの入力などを補助することはできますがほとんど関係ありません。
//多分、ログインを何のために行なっているのかが今回のポイントです。
//ログインはユーザー名とパスワードを入力してもらって、その組み合わせが存在するかどうかをDBに問い合わせる処理です。
//そして、一致する組み合わせが会った時に「セッション変数にそのユーザーのユーザーIDを保存する処理」です。
//ユーザーがログインすると、セッションの値をチェックすることで、そのユーザーのユーザーIDがわかります。
//ですので、ログインしているユーザーごとに別の処理を行うことができます。
//セッションに保存されたユーザーIDを条件にユーザーテーブルをSELECTすれば、
//例えばその人の名前を「ようこそxxさん！」のように表示することもできるわけです。
//ここまではいかがですか？はい、わかりました！ログイン画面をまだ作っていなかったので、関連性が全然わかっていませんでした
//はい、ありがとうございます！では、今回はまだログインができていないので、$user_idは仮置きしておく必要がありますね！
//ちょっと上に行きましょう。＾＾$user_idの初期化の行です。

